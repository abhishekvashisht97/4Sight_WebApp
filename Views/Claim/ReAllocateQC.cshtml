@model AyushmanBharat.Models.ViewModels.ClaimVM
@using AyushmanBharat.Common
@{
    ViewBag.Title = "Claim Reallocate";
}

<section class="content-header">
    <h1>
        ReAllocate (QC)
    </h1>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">

            <div class="box box-primary">
                <div class="box-body pad">
                    <div class="form-group">
                        @Html.LabelFor(model => model.BatchID, htmlAttributes: new { @class = "control-label col-md-1" })
                        <div class="col-md-3">
                            @Html.DropDownListFor(model => model.BatchID, Model.BatchList, "--Select Batch--", new { @id = "ddlBatch", @class = "form-control" })
                        </div>
                    </div>
                    <div class="clearfix"></div>
                    <hr />
                    <div class="clearfix"></div>
                    <div class="form-group table-responsive">

                        @if (User.IsInRole(UserRoleEnum.FunctionalAdmin.ToString()))
                        {
                            <input id="hdnRole" type="hidden" value="@UserRoleEnum.FunctionalAdmin.ToString()" />
                        }
                        else
                        {
                            <input id="hdnRole" type="hidden" value="" />
                        }

                        <table id="tblReAllocateClaim" class="table table-striped  table-responsive table-bordered dt-responsive nowrap" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>
                                        <input type="checkbox" name="select_all" value="1" id="chkSelectAll">
                                    </th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                </tr>
                            </thead>
                        </table>
                        <div class="clearfix"></div>
                        <div class="pull-right dvFunctionalAdmin hidden">
                            <button type="button" class="btn btn-success" title="Submit Selected" id="btnSubmit" data-loading-text="<i class='fa fa-spinner fa-spin'></i> Processing Selected Claim">Submit</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
    $(function () {

        GetClaimByBatchId($("#ddlBatch").val());

        $("#ddlBatch").change(function () {
            $('#tblReAllocateClaim').dataTable().fnDestroy();
            GetClaimByBatchId($('#ddlBatch :selected').val());
        });

    });

    function GetClaimByBatchId(batchId) {

        var rows_selected = [];

        var table = $('#tblReAllocateClaim').DataTable({
            "lengthMenu": [[10, 25, 50, 100, 1000], [10, 25, 50, 100, 1000]],
            "processing": true, // for show progress bar
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            "pageLength": 10,
            "stateSave": true,
            "ajax": {
                "url": "/Claim/LoadReAllocateQCClaim",
                "type": "POST",
                "datatype": "json",
                "data": { 'batchID': batchId },
            },
            "columnDefs":
                [{
                    'targets': 0,
                    'visible': $("#hdnRole").val() == 'FunctionalAdmin',
                    'searchable': false,
                    'orderable': false,
                    'className': 'dt-body-center',
                    'render': function (data, type, row, meta) {
                        return '<input type="checkbox" name="id[]" class="chkClaim">';
                    },
                }
                ],
            'select': 'multi',
            "columns": [
            {},
            { "title": "ClaimID", "data": "ClaimID", "visible": false, "searchable": false },
            { "title": "BatchID", "data": "BatchID", "visible": false, "searchable": false },
            { "title": "Flagging Score", "data": "FlaggingScore", "autoWidth": true },
            { "title": "Case Number", "data": "CaseNumber", "autoWidth": true },
            { "title": "Patient", "data": "PatientName", "autoWidth": true },
            { "title": "Speciality", "data": "Speciality", "autoWidth": true },
            { "title": "Hospital", "data": "HospitalName", "autoWidth": true },
            { "title": "Procedure", "data": "ProcedureName", "autoWidth": true },
            { "title": "Auditor", "data": "AuditorName", "autoWidth": true, "visible": false, "searchable": false },
            { "title": "Allocated QC", "data": "QCName", "autoWidth": true },
            {
                "title": "ReAllocate To", "data": "QCList", "autoWidth": true,
                "render": function (data, type, row) {
                    var $select = $("<select></select>", {
                        "id": "ddl_" + row.ClaimID,
                        "value": data
                    });
                    $.each(data, function (index, currentRow) {

                        var $option = $("<option></option>", {
                            "text": currentRow.Text,
                            "value": currentRow.Value
                        });
                        if (data === currentRow) {
                            $option.attr("selected", "selected")
                        }
                        $select.append($option);
                    });
                    return $select.prop("outerHTML");
                }
            },
            {
                "title": "Action",
                "searchable": false,
                "sortable": false,
                "render": function (data, type, row, meta) {
                    var strURL = '';
                    strURL = strURL + '<a href="@Url.Action("Detail", "Claim")?id=' + row.ClaimID + '&&pageType=@PageTypeEnum.ReAllocateQC.ToString()" class ="btn btn-datatable btn-danger" title="Details"><span class="glyphicon glyphicon-eye-open"></span> Detail</a>';
                    return strURL;
                }
            }
            ],
            dom: '<lf<t>ip>',
            aaSorting: [[2, 'desc']],
            "initComplete": function (settings, json) {
                if (table.data().length > 0) {
                    $(".dvFunctionalAdmin").removeClass("hidden");
                }
                else {
                    $(".dvFunctionalAdmin").addClass("hidden");
                }
                EnableDisableButton();
            }
        });
        /////////////////////Ends Table///////////////////////////


        /////////////////Datatable Events/////////////////////////////
        // Handle click on "Select all" control
        $('#chkSelectAll').on('click', function () {
            // Get all rows with search applied
            //var rows = table.rows({ 'search': 'applied' }).nodes();
            // Check/uncheck checkboxes for all rows in the table
            //$('input[type="checkbox"]', rows).prop('checked', this.checked);

            var checked = this.checked;
            table.column(0).nodes().to$().each(function (index) {
                if (checked) {
                    $(this).find('.chkClaim').prop('checked', 'checked');
                    $(this).parent().addClass("selected");
                } else {
                    $(this).find('.chkClaim').prop('checked', false);
                    $(this).parent().removeClass("selected");
                }
            });
            table.draw();

        });

        // Handle click on checkbox to set state of "Select all" control
        $('#tblReAllocateClaim tbody').on('change', 'input[type="checkbox"]', function () {

            var $row = $(this).closest('tr');

            if (this.checked) {
                $row.addClass('selected');
            } else {
                $row.removeClass('selected');
            }

            // If checkbox is not checked

            if (!this.checked) {
                var el = $('#chkSelectAll').get(0);
                // If "Select all" control is checked and has 'indeterminate' property
                if (el && el.checked && ('indeterminate' in el)) {
                    // Set visual state of "Select all" control
                    // as 'indeterminate'
                    el.indeterminate = true;
                }
            }
            EnableDisableButton();
        });


        //Submit Table data
        $("#btnSubmit").click(function (e) {
            var isValid = true;

            var QCID = $("#ddlQC").val();
            if (QCID == "") {
                $('#ddlQC').focus();
                $("#spnQC").text("Select QC.");
                isValid = false;
            }

            if (isValid) {
                var claimList = [];

                //Since dropdown value is getting as undefined except in selected pages we use gnGEtNodes
                var claimNode = $("#tblReAllocateClaim").dataTable().fnGetNodes();

                for (var i = 0; i < claimNode.length; i++) {
                    var node = $(claimNode[i]);
                    var isSelected = $(node).hasClass('selected');

                    var item = $("#tblReAllocateClaim").dataTable().fnGetData()[i];
                    var QCID = $("#ddl_" + item.ClaimID).val();
                    var claim = {};
                    if (isSelected) {
                        if (QCID !== "0") {
                            claim = { ClaimID: item.ClaimID, AuditStatus: '@AuditStatusEnum.QCPending.ToString()', QCUserID: QCID };
                        }
                        claimList.push(claim);
                    }
                }

                var $this = $(this);
                $this.button('loading');

                if (claimList.length > 0) {
                    $.ajax({
                        url: "/Claim/ReAllocateQC",
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        data: JSON.stringify(claimList),
                        type: 'POST',
                        success: function (data) {
                            if (data == "Success") {
                                displaySuccessNotification("Claim Submitted Successfully.");
                            } else if (data == "NoRow") {
                                displaySuccessNotification("No rows selected.");
                            }
                            //$('#btnSubmit').one('click', clickSubmitHandler);
                        },
                        error: function (ex) {
                            displayErrorNotification("Sorry an internal error occured," + ex);
                            $this.button('reset');
                        },
                        complete: function () {
                            $('#tblReAllocateClaim').DataTable().ajax.reload();
                            //reset state
                            $this.button('reset');
                        }
                    });
                }
                else {
                    //reset state
                    $this.button('reset');
                }
                e.stopImmediatePropagation();
                return false;
            }
        });

        function EnableDisableButton() {
            var selectedRow = table.rows(".selected").data();
            if (selectedRow.length > 0) {
                $("#btnSubmit").attr("disabled", false);
            }
            else {
                $("#btnSubmit").attr("disabled", true);
            }
        }
        ///////////////////////////////////////////////////////////
    }
    ////////////ENDS GetClaimByBatchId()  /////////////////////////////////////
</script>
