@model AyushmanBharat.Models.ViewModels.ClaimCheckListQuestionVM
@using AyushmanBharat.Common
@{
    ViewBag.Title = "Claim CheckList Question";
}

<section class="content-header">
    <h1>
        Claim  CheckList Question <small class="text-muted">@Model.ClaimVM.CaseNumber</small>
    </h1>
    <ol class="breadcrumb">
        <li><a href="@Url.Action("Index","Home")"><i class="fa fa-dashboard"></i> Home</a></li>
        @if (Model.PageType == PageTypeEnum.Rejected.ToString())
        {
            <li><a href="@Url.Action("Rejected", "Claim", new { batchID = Model.ClaimVM.BatchID })">Claim</a></li>
        }
        else
        {
            <li><a href="@Url.Action("Audit", "Claim", new { batchID = Model.ClaimVM.BatchID, UserAs=Model.ClaimVM.UserAs })">Claim</a></li>
        }
        <li class="active">CheckList Question</li>
    </ol>
</section>

<section class="content">
    <div class="row">
        <div class="col-md-12">

            <div class="box box-primary">
                <div class="box-body pad">
                    @Html.HiddenFor(model => model.ClaimID, new { @id = "hdnClaimID" })
                    @Html.HiddenFor(model => model.ClaimVM.BatchID, new { @id = "hdnBatchID" })
                    @Html.HiddenFor(model => model.PackageID, new { @id = "hdnPackageID" })
                    @Html.HiddenFor(model => model.PageType, new { @id = "hdnPageType" })
                    @Html.HiddenFor(model => model.ClaimVM.AuditStatus, new { @id = "hdnAuditStatus" })
                    
                    @if (User.IsInRole(UserRoleEnum.QC.ToString()) && (Model.ClaimVM.AuditStatus == AuditStatusEnum.QCPending.ToString()))
                    {                                            
                        <div class="form-group col-md-4 margin-l-m15">
                            @Html.Label("Auditor", new { @class = "col-md-3 control-label margin-l-m15" })
                            <div class="col-md-9">
                                @Html.DisplayFor(m => m.ClaimVM.AuditorName)
                            </div>
                        </div>

                        <div class="form-group col-md-2">
                            @Html.Label("Final Score", new { @class = "col-md-7 control-label" })
                            <div class="col-md-5">
                                @if (Model.ClaimVM.AuditorChecklistStatus == CheckListScoreEnum.Red.ToString())
                                {
                                    <span class="red-square">Red</span>
                                }
                                else if (Model.ClaimVM.AuditorChecklistStatus == CheckListScoreEnum.Green.ToString())
                                {
                                    <span class="green-square">Green</span>
                                }
                                else if (Model.ClaimVM.AuditorChecklistStatus == CheckListScoreEnum.Amber.ToString())
                                {
                                    <span class="amber-square">Amber</span>
                                }
                            </div>
                        </div>

                        <div class="form-group col-md-2">
                            @Html.Label("Auditor Status", new { @class = "col-md-7 control-label" })
                            <div class="col-md-5">
                                @if (Model.ClaimVM.AuditorFinalStatus == AuditorFinalStatusEnum.Red.ToString())
                                {
                                    <span class="red-square">Red</span>
                                }
                                else if (Model.ClaimVM.AuditorFinalStatus == AuditorFinalStatusEnum.Green.ToString())
                                {
                                    <span class="green-square">Green</span>
                                }
                                else if (Model.ClaimVM.AuditorFinalStatus == AuditorFinalStatusEnum.Amber.ToString())
                                {
                                    <span class="amber-square">Amber</span>
                                }
                            </div>
                        </div>

                        <div class="form-group col-md-4">
                            @Html.Label("Auditor Remark", new { @class = "col-md-3 control-label" })
                            <div class="col-md-9">
                                @Html.DisplayFor(m => m.ClaimVM.AuditorRemark)
                            </div>
                        </div>

                        <div class="clearfix"></div>
                        <hr />
                    }
                    else if (User.IsInRole(UserRoleEnum.Auditor.ToString()))
                    {                        
                        @*<div class="form-group col-md-4 margin-l-m15">
                                @Html.Label("QC", new { @class = "col-md-3 control-label margin-l-m15" })
                                <div class="col-md-9">
                                    @Html.DisplayFor(m => m.ClaimVM.QCName)
                                </div>
                            </div>*@

                    if (Model.PageType == PageTypeEnum.Rejected.ToString())
                    {
                        <div class="form-group col-md-4 margin-l-m15">
                            @Html.Label("QC Status", new { @class = "col-md-3 control-label margin-l-m15" })
                            <div class="col-md-9">
                                @Html.DisplayFor(m => m.ClaimVM.FinalStatus)
                            </div>
                        </div>

                        <div class="form-group col-md-4 margin-l-m15">
                            @Html.Label("Remark", new { @class = "col-md-3 control-label margin-l-m15" })
                            <div class="col-md-9">
                                @Html.DisplayFor(m => m.ClaimVM.QCRemark)
                            </div>
                        </div>
                        <div class="clearfix"></div>
                        <hr />
                        }
                    }
                   
                    <div class="form-group dvQuestion table-responsive">
                        <div class="col-md-2 col-md-offset-4 tblBack">
                            <button type="button" class="btn btn-danger" data-toggle="modal" data-target="#dvClaimModal"><span class="glyphicon glyphicon-eye-open"></span> View Claim Detail</button>
                        </div>
                        <table id="tblQuestion" class="table table-striped  table-responsive table-bordered dt-responsive nowrap" cellspacing="0" style="width:100%"></table>
                    </div>

                    <div class="clearfix"></div>
                    <hr />

                    <div class="form-group col-md-4 margin-l-m15">
                        @Html.LabelFor(m => m.FinalStatus, new { @class = "required" })
                        @Html.DropDownListFor(m => m.FinalStatus, Model.FinalStatusList, "---Select Final Status---", new { @id = "ddlFinalStatus", @class = "form-control" })
                        <span id="spnFinalStatus" class="text-danger"></span>
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(m => m.RemarkForClaim, new { @class = "control-label" })
                        @Html.TextAreaFor(m => m.RemarkForClaim, new { @class = "form-control" })
                        <span id="spnRemark" class="text-danger"></span>
                    </div>

                    <div class="pull-right dvButton">
                        <button type="button" class="btn btn-success" title="Submit" id="btnSubmit" data-loading-text="<i class='fa fa-spinner fa-spin'></i> Processing Questions">Submit</button>
                        @if (Model.PageType == PageTypeEnum.Rejected.ToString())
                        {
                            <a id="btnBack" class="btn btn-info" title="Click to back" href="@Url.Action("Rejected", "Claim", new { batchID = Model.ClaimVM.BatchID })"> Back To List</a>
                        }
                        else if (Model.PageType == PageTypeEnum.ClaimAudit.ToString())
                        {
                            <a id="btnBack" class="btn btn-info" title="Click to back" href="@Url.Action("Audit", "Claim", new { batchID = Model.ClaimVM.BatchID, UserAs = Model.ClaimVM.UserAs })"> Back To List</a>
                        }

                    </div>

                </div>
            </div>
        </div>
    </div>


    <!-- Modal -->
    <div id="dvClaimModal" class="modal fade" role="dialog">
        <div class="modal-dialog">

            <!-- Modal content-->
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal">&times;</button>
                    <h4 class="modal-title">Claim Detail</h4>
                </div>
                <div class="modal-body">
                    @Html.Partial("~/Views/Claim/_DetailPartial.cshtml", Model.ClaimVM)
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
                </div>
            </div>

        </div>
    </div>
</section>


<script>
    $(function () {


        $("#ddlFinalStatus").change(function () {
            if ($("#ddlFinalStatus").val() == "") {
                $("#spnFinalStatus").text("Select Final Status.");
            }
            else {
                $("#spnFinalStatus").text("");
            }
        });


        var claimID = $("#hdnClaimID").val();
        var batchID = $("#hdnBatchID").val();
        var packageID = $("#hdnPackageID").val();
        var pageType = $("#hdnPageType").val();
        var auditStatus = $("#hdnAuditStatus").val();
        var table = $('#tblQuestion').DataTable({
            "processing": true, // for show progress bar
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            //"pageLength": 10,
            "paging": false,
            "ajax": {
                "url": "/ClaimCheckListQuestion/LoadQuestion",
                "type": "POST",
                "datatype": "json",
                "data": { id: claimID, auditStatus : auditStatus, packageID: packageID, pageType: pageType }
            },
            "columnDefs":
                [
                    { "targets": 4, "width": "9%" }
                ],
            aaSorting: [[0, 'asc']],
            dom: '<lf<t>ip>',
            "columns": [
                       { "data": "Sequence", "visible": false, "searchable": false },
                       { "data": "CheckListQuestionID", "visible": false, "searchable": false },
                       { "data": "PackageID", "visible": false, "searchable": false },
                       { "title": "Question", "data": "Question", "autoWidth": true },
                       {
                           "title": "Answer", "data": "AnswerList", "autoWidth": true, "visible": $("#hdnAuditStatus").val() == '@AuditStatusEnum.Allocated.ToString()',
                           "render": function (data, type, row, meta) {
                               var $select = $("<select></select>", {
                                   "id": "ddl_" + row.CheckListQuestionID,
                                   "class": "form-control select-answer",
                               });
                               $.each(data, function (index, currentRow) {
                                   var $option = $("<option></option>", {
                                       "text": currentRow.Text,
                                       "value": currentRow.Value
                                   });
                                   if (row.Answer === currentRow.Value) {
                                       $option.attr("selected", "selected")
                                   }
                                   $select.append($option);
                               });
                               return $select.prop("outerHTML");
                           }
                       },
                        {
                            "title": "Selected Answer", "data": "Answer", "autoWidth": true, "visible": $("#hdnAuditStatus").val() === '@AuditStatusEnum.QCPending.ToString()',
                        },
                       { "title": "Source", "data": "Source", "autoWidth": true },
                       {
                           "title": "Report Remarks", "data": "ReportRemarks", "autoWidth": true,
                           "render": function (data, type, row, meta) {

                               if ($("#hdnAuditStatus").val() === '@AuditStatusEnum.Allocated.ToString()') {
                                   var $remarkText = '';
                                   if (row.ExpectedAnswer !== row.Answer && row.Answer !== null)//ExpectedAnswer != selectedAnswer then display else hide
                                   {
                                       $remarkText = $("<span></span>", {
                                           "id": "spn_" + row.CheckListQuestionID,
                                           "class": "form-control"
                                       });

                                   }
                                   else {
                                       $remarkText = $("<span></span>", {
                                           "id": "spn_" + row.CheckListQuestionID,
                                           "class": "form-control hidden"
                                       });
                                   }
                                   $("#spn_" + row.CheckListQuestionID).text(row.ReportRemarks);
                                   return $remarkText.prop("outerHTML");
                               }
                               else {
                                   //For QC Display Text
                                   var auditorAnswer = row.Answer == 'Yes' ? 'Y' : 'N';
                                   if (row.ExpectedAnswer !== auditorAnswer && row.Answer !== null)//ExpectedAnswer != selectedAnswer then display else hide
                                   {
                                       return row.ReportRemarks;
                                   }
                                   else {
                                       return '';
                                   }
                               }
                           }
                       },
                       { "data": "ExpectedAnswer", "visible": false }
            ],
            rowCallback: function (row, data, index) {
                ///////Hide n show Report Remark/////////////////////
                var selectedAnswer = "";
                selectedAnswer = (data.Answer == "Yes" ? "Y" : "N");
                if (selectedAnswer !== data.ExpectedAnswer) {
                    //if ($("#hdnRole").val() == "QC") {
                    //$("#spn_" + data.CheckListQuestionID).text(data.ReportRemarks);
                    //}
                    $("#spn_" + data.CheckListQuestionID).removeClass("hidden");
                }
                else {
                    $("#spn_" + data.CheckListQuestionID).addClass("hidden");
                }

                ///////On Change Of DropDown ALso/////////////////////
                var element = $(row).find('.select-answer');

                element.on("change", function () {
                    if ($(this).val() !== '0') {
                        $("#ddl_" + data.CheckListQuestionID).removeClass("error-box");
                        if ($(this).val() !== data.ExpectedAnswer) {
                            $("#spn_" + data.CheckListQuestionID).text(data.ReportRemarks);
                            $("#spn_" + data.CheckListQuestionID).removeClass("hidden");
                        }
                        else {
                            $("#spn_" + data.CheckListQuestionID).addClass("hidden");
                        }
                    }
                    else {
                        $("#ddl_" + data.CheckListQuestionID).addClass("error-box");
                    }
                });
            }
        });


        //This Section is used in ClaimCheckListQuestion/Index (For Auditor n QC Submit)

        $("#btnSubmit").click(function () {
            var $btn = $(this);
            $btn.button('loading');

            var noOfRows = $('#tblQuestion').dataTable().fnGetData().length;

            var isValid = true;
            var remark = $("#RemarkForClaim").val();
            var finalStatus = $("#ddlFinalStatus").val();
            if (finalStatus == "") {
                $("#spnFinalStatus").text("Select Final Status.");
                isValid = false;
            }

            //if ($("#hdnRole").val() == "QC") {
            if ($("#hdnAuditStatus").val() == '@AuditStatusEnum.QCPending.ToString()') {
                if (finalStatus == "") {
                    $("#spnFinalStatus").text("Please select status.");
                    isValid = false;
                }
                else {
                    $("#spnFinalStatus").text("");
                }

                if (finalStatus == '@QCFinalStatusEnum.Rejected.ToString()') {
                    if (remark == "") {
                        $("#spnRemark").text("Remark is required.");
                        isValid = false;
                    }
                    else {
                        $("#spnRemark").text("");
                    }
                }

                if (isValid) {
                    $.ajax({
                        url: "/ClaimCheckListQuestion/QCSubmit",
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        data: JSON.stringify({ claimID: claimID, finalStatus: finalStatus, remark: remark }),
                        type: 'POST',
                        success: function (data) {
                            if (data == "Success") {
                                displaySuccessNotification("Final Status Submitted Successfully.");
                                $("#btnBack")[0].click();

                            }
                            else {
                                displayErrorNotification("Something went wrong");
                            }
                        },
                        error: function (ex) {
                            displayErrorNotification("Sorry an internal error occured," + ex);
                            $btn.button('reset');
                        },
                        complete: function () {
                            $btn.button('reset');
                        }
                    });
                }
                else {
                    $btn.button('reset');
                }
            } ////////////////Ends For QC///////////////////////
            else if ($("#hdnAuditStatus").val() == '@AuditStatusEnum.Allocated.ToString()') {  ///////For Auditor////////////////
                var selectedData = [];
                //var selectedData = {
                //    ClaimCheckListQuestionID: '',
                //    ClaimID: '',
                //    CheckListQuestionID: '',
                //    Answer: '',
                //    ExpectedAnswer: '',
                //    Score: ''
                //};

                if (noOfRows > 0) {
                    table.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        var item = this.data();
                        item.Answer = $("#ddl_" + item.CheckListQuestionID).val();
                        if (item.Answer == "0") {
                            isValid = false;
                            $("#ddl_" + item.CheckListQuestionID).addClass("error-box");
                        }
                        else {
                            $("#ddl_" + item.CheckListQuestionID).removeClass("error-box");
                            var question = {
                                ClaimCheckListQuestionID: item.ClaimCheckListQuestionID,
                                ClaimID: item.ClaimID,
                                CheckListQuestionID: item.CheckListQuestionID,
                                Answer: item.Answer,
                                ExpectedAnswer: item.ExpectedAnswer,
                                Score: ''
                            }
                            selectedData.push(question);
                        }
                    });
                }
                else {
                    if (remark == "") {
                        $("#spnRemark").text("Remark is required.");
                        isValid = false;
                    }
                    else {
                        $("#spnRemark").text("");
                    }
                }
                var url = "";
                if (pageType == '@PageTypeEnum.Rejected.ToString()') {
                    url = "/ClaimCheckListQuestion/Edit";
                }
                else {
                    url = "/ClaimCheckListQuestion/Create";
                }

                if (isValid) {
                    $.ajax({
                        url: url,
                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        data: JSON.stringify({ claimQuestionList: selectedData, claimID: claimID, auditorFinalStatus: finalStatus, remark: remark }),
                        type: 'POST',
                        success: function (data) {
                            if (data == "Success") {
                                displaySuccessNotification("ClaimQuestion Submitted Successfully.");
                                $("#btnBack")[0].click();

                            } else if (data == "NoRow") {
                                displayErrorNotification("No rows selected.");
                            }
                        },
                        error: function (ex) {
                            displayErrorNotification("Sorry an internal error occured," + ex);
                            $btn.button('reset');
                        },
                        complete: function () {
                            //$('#tblQuestion').dataTable().fnDestroy();
                            //reset state
                            $btn.button('reset');
                        }
                    });
                }
                else {
                    $btn.button('reset');
                }
            }

        });//End OF btnSubmit
    });

</script>
